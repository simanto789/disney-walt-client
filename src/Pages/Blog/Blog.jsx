

const Blog = () => {
    return (
        <div className="space-y-10 mt-10 mb-10">
            <div tabIndex={0} className="collapse collapse-arrow border border-base-300 bg-base-100 rounded-box">
                <div className="collapse-title text-2xl  font-medium">
                    What is an access token and refresh token? How do they work and where should we store them on the client-side?
                </div>
                <div className="collapse-content text-xl">
                    <p>
                        Access tokens are short-lived tokens that are used to access protected resources. They are typically generated by the authorization server and are used by the client application to make authenticated requests to the resource server. Access tokens are typically limited in scope and can only be used to access certain resources. <br />
                        Refresh tokens are long-lived tokens that are used to generate new access tokens. They are typically generated by the authorization server and are stored by the client application. Refresh tokens are not used to access protected resources directly. Instead, they are used to generate new access tokens when the old access token expires.
                        <br />
                        When a user logs in to a client application, the client application requests an access token from the authorization server. The authorization server validates the users credentials and, if they are valid, generates an access token and a refresh token. The access token is returned to the client application, and the refresh token is stored by the client application.
                        <br />
                        When the access token expires, the client application can use the refresh token to generate a new access token. The authorization server validates the refresh token and, if it is valid, generates a new access token and returns it to the client application <br />
                        Access tokens and refresh tokens should be stored securely on the client-side. They should not be stored in plain text or in a way that is accessible to unauthorized users. Access tokens and refresh tokens should be stored in a secure location, such as a database or a secure file.
                    </p>
                </div>
            </div>
            <div tabIndex={0} className="collapse collapse-arrow border border-base-300 bg-base-100 rounded-box">
                <div className="collapse-title text-2xl  font-medium">

                    Compare SQL and NoSQL databases?
                </div>
                <div className="collapse-content text-xl">

                    Here is a comparison of SQL and NoSQL databases: <br />  <br />

                    <h5 className="font-medium">SQL databases</h5>

                    Relational databases that use Structured Query Language (SQL) to store and retrieve data. Data is stored in tables, which are made up of rows and columns.SQL is a powerful language that allows for complex queries and data analysis.SQL databases are well-suited for storing structured data, such as customer records or product inventory. Some popular SQL databases include MySQL, PostgreSQL, and Oracle. <br /> <br />
                    <h5 className="font-medium">NoSQL databases</h5>

                    Non-relational databases that do not use SQL.Data is stored in a variety of formats, such as key-value pairs, documents, and graphs.NoSQL databases are designed for storing large amounts of data and for providing high performance.NoSQL databases are well-suited for storing unstructured data, such as social media posts or sensor data.Some popular NoSQL databases include MongoDB, CouchDB, and Cassandra.
                </div>
            </div>
            <div tabIndex={0} className="collapse collapse-arrow border border-base-300 bg-base-100 rounded-box">
                <div className="collapse-title text-2xl  font-medium">
                    What is express js? What is Nest JS?
                </div>
                <div className="collapse-content text-xl">
                    <p>
                        <h5 className="font-medium">Express js</h5>
                        <p>
                            Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. Express is designed for building web applications and APIs and has been called the de facto standard server framework for Node.js. <br />
                            It is a free and open-source framework, released under the MIT license. It is written in JavaScript and uses the Node.js runtime environment. Express is a popular choice for building web applications and APIs because it is easy to use, flexible, and powerful.</p>
                        <h5 className="font-medium">Nest js</h5>
                        <p>
                            NestJS is a progressive Node.js framework that helps build scalable server-side applications. It is built with and fully supports TypeScript (yet still enables developers to code in pure JavaScript) and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming). <br />
                            NestJS provides an out-of-the-box application architecture which allows developers and teams to create highly testable, scalable, loosely coupled, and easily maintainable applications. The architecture is heavily inspired by Angular. <br />
                            NestJS is a popular choice for building server-side applications because it is easy to learn and use, flexible, and powerful. It is also well-documented and has a large community of users and developers.
                        </p>
                    </p>
                </div>
            </div>
            <div tabIndex={0} className="collapse collapse-arrow border border-base-300 bg-base-100 rounded-box">
                <div className="collapse-title text-2xl font-medium">
                    What is MongoDB aggregate and how does it work?
                </div>
                <div className="collapse-content text-xl">
                    <p>
                        In MongoDB, the aggregate operation is used to perform advanced data processing and analysis on collections of documents. It allows to perform computations, transformations, and aggregations on the data stored in the database. <br />

                        The aggregate operation takes an array of stages as its input. Each stage specifies a particular operation or transformation to be applied to the documents in the collection. The stages are executed in order, with the output of one stage serving as the input for the next stage. <br /> <br />

                        Here is a high-level overview of how the MongoDB aggregate operation works: <br /> <br />
 
                        <span className="font-medium">Match Stage:</span> Optionally filters the documents based on specified criteria. It works similar to the regular find operation by using query expressions to match documents. <br />
                        <span className="font-medium">Group Stage:</span> Groups documents together based on a specific field or set of fields. It allows you to perform aggregations such as sum, average, count, etc., on grouped data. <br />
                        <span className="font-medium">Project Stage:</span> Modifies the shape of the documents by including or excluding specific fields or adding computed fields. <br />
                        <span className="font-medium">Sort Stage:</span> Orders the documents in the result set based on one or more fields. <br />
                        <span className="font-medium">Limit Stage:</span> Limits the number of documents in the result set. <br />
                        <span className="font-medium">Skip Stage:</span> Skips a specified number of documents in the result set. <br />
                        By combining these stages in different ways, you can perform complex data processing tasks, aggregation pipelines, and generate meaningful insights from your MongoDB collections.
                    </p>
                </div>
            </div>
        </div>
    );
};

export default Blog;